#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    # local2.*                       /var/log/haproxy.log
    #
    log             127.0.0.1 local2 notice

    # chroot        /var/lib/haproxy
    pidfile         /var/run/haproxy.pid
    maxconn         384
    uid             <APPLICATION_UID>
    # gid           <APPLICATION_GID>
    # user          <APPLICATION_USER>
    # group         <APPLICATION_GROUP>

    # This may be used to ensure that the instance will quit even if connections
    # remain opened during a soft-stop (for example with long timeouts for a proxy
    # in tcp mode). It applies both in TCP and HTTP mode.
    hard-stop-after     30s

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    # performance tuning

    #  Sometimes it is desirable to avoid sending agent and health checks to
    # servers at exact intervals, for instance when many logical servers are
    # located on the same physical server. With the help of this parameter, it
    # becomes possible to add some randomness in the check interval between 0
    # and +/- 50%. A value between 2 and 5 seems to show good results. The
    # default value remains at 0.
    spread-checks   5

    # Disables the use of SO_REUSEPORT - see socket(7). It is equivalent to the
    # command line argument "-dR".
    noreuseport

    # Disables the use of kernel tcp splicing between sockets on Linux. It is
    # equivalent to the command line argument "-dS". Data will then be copied
    # using conventional and more portable recv/send calls. Kernel tcp splicing is
    # limited to some very recent instances of kernel 2.6. Most versions between
    # 2.6.25 and 2.6.28 are buggy and will forward corrupted data, so they must not
    # be used. This option makes it easier to globally disable kernel splicing in
    # case of doubt.
    nosplice

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    <LB_MODE>
    log                     global
    option                  <LB_MODE>log
    # option                  dontlognull
    option                  logasap
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         5000ms
    timeout client          50000ms
    timeout server          50000ms
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

    compression algo        gzip
    compression type        text/html text/plain
#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend main
    bind *:<LB_FRONTEND_PORT>
    # acl url_static       path_beg       -i /static /images /javascript /stylesheets
    # acl url_static       path_end       -i .jpg .gif .png .css .js

    # use_backend static          if url_static
    default_backend             app

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend app
    balance     <LB_STRATEGY>
    server  app1 nginx_1:3000 check
